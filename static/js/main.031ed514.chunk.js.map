{"version":3,"sources":["img/covidimage.png","components/CountryDropdown.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dropdown","styled","select","CountryDropdown","props","useState","countries","setCountries","onChange","useEffect","fetch","then","res","json","data","console","log","value","map","country","i","key","name","ContainerCards","section","Card","div","Cards","confirmed","recovered","deaths","lastUpdate","className","toLocaleString","Date","toDateString","ImgTitle","App","chosenCountry","setChosenCountry","dataCountry","setDataCountry","src","covidimage","alt","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,wC,w0CCG3C,IAAMC,EAAWC,IAAOC,OAAV,KAmDCC,EA3BS,SAACC,GAAW,IAAD,EACAC,mBAAS,IADT,mBAC3BC,EAD2B,KAChBC,EADgB,KAE1BC,EAAaJ,EAAbI,SASR,OAPAC,qBAAU,WACTC,MAAM,6CACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUP,EAAaO,EAAKR,gBACjC,IAEHS,QAAQC,IAAIV,GAEX,6BACEA,GACA,kBAACN,EAAD,CAAUQ,SAAUA,GACnB,4BAAQS,MAAM,UAAd,UACCX,EAAUY,KAAI,SAACC,EAASC,GAAV,OACd,4BAAQC,IAAKD,EAAGH,MAAOE,EAAQG,MAC7BH,EAAQG,Y,+zBC1ChB,IAAMC,EAAiBtB,IAAOuB,QAAV,KAOdC,EAAOxB,IAAOyB,IAAV,KAgEKC,EA9BD,SAAC,GAA4D,IAAD,IAAzDb,KAAQc,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WACtD,OACC,kBAACR,EAAD,KACC,kBAACE,EAAD,KACC,yBAAKO,UAAU,YACd,2CAAiBJ,EAAUX,MAAMgB,iBAAjC,KACA,qEACA,+BAAK,IAAIC,KAAKH,GAAYI,eAA1B,OAIF,kBAACV,EAAD,KACC,yBAAKO,UAAU,aACd,4CAAkBH,EAAUZ,MAAMgB,iBAAlC,KACA,sEACA,+BAAK,IAAIC,KAAKH,GAAYI,eAA1B,OAIF,kBAACV,EAAD,KACC,yBAAKO,UAAU,UACd,wCAAcF,EAAOb,MAAMgB,iBAA3B,KACA,oEACA,+BAAK,IAAIC,KAAKH,GAAYI,eAA1B,S,6KC5DL,IAAMC,EAAWnC,IAAOyB,IAAV,KAwCCW,EA/BH,WAAO,IAAD,EACyBhC,mBAAS,UADlC,mBACViC,EADU,KACKC,EADL,OAEqBlC,mBAAS,IAF9B,mBAEVmC,EAFU,KAEGC,EAFH,KAoBjB,OAXAhC,qBAAU,YACS,UAAjB6B,EACE5B,MAAM,kCACNA,MAAM,4CAAD,OAA6C4B,KAEnD3B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU2B,EAAe3B,QAC9B,CAACwB,IAEJvB,QAAQC,IAAIwB,GAGX,yBAAKR,UAAU,OACd,kBAACI,EAAD,KACC,yBAAKM,IAAKC,IAAYC,IAAI,cAE3B,kBAAC,EAAD,CAAiBpC,SArBE,SAACqC,GACrB9B,QAAQC,IAAI6B,EAAEC,OAAO7B,OACrBsB,EAAiBM,EAAEC,OAAO7B,UAoBxBuB,GAAe,kBAAC,EAAD,CAAO1B,KAAM0B,MC9BZO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.031ed514.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covidimage.d7265326.png\";","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst Dropdown = styled.select`\n\tdisplay: block;\n\tfont-size: 18px;\n\tfont-family: sans-serif;\n\tfont-weight: 700;\n\tcolor: #444;\n\tline-height: 1.3;\n\tpadding: 0.6em 1.4em 0.5em 0.8em;\n\tbox-sizing: border-box;\n\tmargin: auto;\n\tborder: 1px solid #aaa;\n\tbox-shadow: 0 1px 0 1px rgba(0, 0, 0, 0.04);\n\tborder-radius: 0.5em;\n\t-moz-appearance: none;\n\t-webkit-appearance: none;\n\tappearance: none;\n\tbackground-color: #fff;\n\tbackground-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23007CB2%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E\"),\n\t\tlinear-gradient(to bottom, #ffffff 0%, #e5e5e5 100%);\n\tbackground-repeat: no-repeat, repeat;\n\tbackground-position: right 0.7em top 50%, 0 0;\n\tbackground-size: 0.65em auto, 100%;\n`;\n\nconst CountryDropdown = (props) => {\n\tconst [countries, setCountries] = useState([]);\n\tconst { onChange } = props;\n\n\tuseEffect(() => {\n\t\tfetch(`https://covid19.mathdro.id/api/countries/`)\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => setCountries(data.countries));\n\t}, []);\n\n\tconsole.log(countries);\n\treturn (\n\t\t<div>\n\t\t\t{countries && (\n\t\t\t\t<Dropdown onChange={onChange}>\n\t\t\t\t\t<option value=\"global\">Global</option>\n\t\t\t\t\t{countries.map((country, i) => (\n\t\t\t\t\t\t<option key={i} value={country.name}>\n\t\t\t\t\t\t\t{country.name}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</Dropdown>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default CountryDropdown;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ContainerCards = styled.section`\n\tdisplay: flex;\n\tjustify-content: space-around;\n\talign-items: center;\n\tcolor: grey;\n`;\n\nconst Card = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n\tmargin-top: 30px;\n\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n\n\t.infected {\n\t\tborder-bottom: 10px solid rgba(0, 0, 255, 0.5);\n\t\tpadding: 20px;\n\t\twidth: 200px;\n\t\theigth: 400px;\n\t}\n\n\t.recovered {\n\t\tborder-bottom: 10px solid rgba(0, 255, 0, 0.5);\n\t\tpadding: 20px;\n\t\twidth: 200px;\n\t\theigth: 400px;\n\t}\n\n\t.deaths {\n\t\tborder-bottom: 10px solid rgba(255, 0, 0, 0.5);\n\t\tpadding: 20px;\n\t\twidth: 200px;\n\t\theigth: 400px;\n\t}\n\n\tp {\n\t\tcolor: #8a8a8a;\n\t}\n`;\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\treturn (\n\t\t<ContainerCards>\n\t\t\t<Card>\n\t\t\t\t<div className=\"infected\">\n\t\t\t\t\t<h4> Confirmed: {confirmed.value.toLocaleString()} </h4>\n\t\t\t\t\t<h6>Number of infected cases of COVID-19 </h6>\n\t\t\t\t\t<p> {new Date(lastUpdate).toDateString()} </p>\n\t\t\t\t</div>\n\t\t\t</Card>\n\n\t\t\t<Card>\n\t\t\t\t<div className=\"recovered\">\n\t\t\t\t\t<h4> Recovered : {recovered.value.toLocaleString()} </h4>\n\t\t\t\t\t<h6>Number of recovered cases of COVID-19 </h6>\n\t\t\t\t\t<p> {new Date(lastUpdate).toDateString()} </p>\n\t\t\t\t</div>\n\t\t\t</Card>\n\n\t\t\t<Card>\n\t\t\t\t<div className=\"deaths\">\n\t\t\t\t\t<h4> Deaths: {deaths.value.toLocaleString()} </h4>\n\t\t\t\t\t<h6>Number of deaths caused by COVID-19 </h6>\n\t\t\t\t\t<p> {new Date(lastUpdate).toDateString()} </p>\n\t\t\t\t</div>\n\t\t\t</Card>\n\t\t</ContainerCards>\n\t);\n};\n\nexport default Cards;\n","import React, { useState, useEffect } from \"react\";\nimport covidimage from \"./img/covidimage.png\";\nimport CountryDropdown from \"./components/CountryDropdown\";\nimport Cards from \"./components/Cards\";\nimport styled from \"styled-components\";\nimport { scryRenderedComponentsWithType } from \"react-dom/test-utils\";\n\nconst ImgTitle = styled.div`\n\tmargin: 30px;\n\tdisplay: flex;\n\tjustify-content: center;\n\timg {\n\t\theight: 80px;\n\t}\n`;\n\nconst App = () => {\n\tconst [chosenCountry, setChosenCountry] = useState(\"global\");\n\tconst [dataCountry, setDataCountry] = useState(\"\");\n\n\tconst handleChange = (e) => {\n\t\tconsole.log(e.target.value); // no esta logueando nada\n\t\tsetChosenCountry(e.target.value);\n\t};\n\n\tuseEffect(() => {\n\t\t(chosenCountry == \"global\"\n\t\t\t? fetch(\"https://covid19.mathdro.id/api\")\n\t\t\t: fetch(`https://covid19.mathdro.id/api/countries/${chosenCountry}`)\n\t\t)\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => setDataCountry(data));\n\t}, [chosenCountry]);\n\n\tconsole.log(dataCountry);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ImgTitle>\n\t\t\t\t<img src={covidimage} alt=\"COVID-19\" />\n\t\t\t</ImgTitle>\n\t\t\t<CountryDropdown onChange={handleChange} />\n\t\t\t{dataCountry && <Cards data={dataCountry} />}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}